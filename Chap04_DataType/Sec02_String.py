"""
2) 문자열 (String)
"""
# 문자열 만들기 4가지 방법
print("Hello World")
print('Python is fun')
print("""Life is too short, You need python""")
print('''Life is too shor, You need python''')
print()
"""
여러 줄 짜리 문자열 처리

예1) 줄바꿈 문자인 '\n' 삽입

>>> multiline = "Life is too short\nYou need python"
위의 예처럼 줄바꿈 문자인 '\n'을 삽입하는 방법이 있지만 읽기에 너무 불편하고 너무 줄이 길어지는 단점이 있다.
이것을 극복하기 위해 파이썬에서는 다음과 같이 ("*3)를 이용한다.

    예 2) 연속된 이중인용부호 세 개 이용
    multiline='''
    Life is too short
    You need python
    '''
    위 예에서도 확인할 수 있듯이 문자열이 여러줄일 경우 위와같은 방식이 상당히 유리하고 깔끔하다는 것을 알 수 있을 것이다.
""""""
[참고] 이스케이프 코드

여러 줄 짜리 문장을 처리할 때 '\n'과 같은 역슬래시 문자를 이용한 이스케이프 코드를 사용했다.
이와 같은 문자를 이스케이프 코드라고 부르는데, 출력물을 보기 좋게 정렬하거나 그 외 특별한 용도로 자주이용된다.
몇 가지 이스케이프 코드를 정리하면 다음과 같다.

    코드    설명
    \n    개행 (줄바꿈)
    \v    수직 탭
    \t    수평 탭
    \r    캐리지 리턴
    \f    폼 피드
    \a    벨 소리
    \b    백 스페이스
    \000    널문자
    \\    문자 "\"
    \'    단일 인용부호(')
    \"    이중 인용부호(")
    이중에서 활용빈도가 높은 것은 \n, \t, \\, \', \"이다. 나머지는 대부분의 프로그램에서 잘 쓰이지 않는다.
""""""
문자열 연산
문자열을 더하거나 곱하는 방법에 대해 알아보기로 하자.

예 1) 문자열 합치기(Concatenation)

>>> head = "Python"
>>> tail = " is fun!"
>>> print(head + tail)
Python is fun!

    예 2) 문자열 곱하기
    
    >>> a = "python"
    >>> print(a * 2)
    pythonpython
    여기도 마찬가지로 "*"의 의미는 숫자 곱하기의 의미와는 다르게 사용되었다.
    여기서 사용된 ‘*’는 문자열의 반복을 뜻하는 의미로 사용되었다.
    굳이 예를 설명할 필요가 없을 정도로 직관적이다.
    "print(a * 2)"라는 문장은 a를 두번 반복해 출력하라는 뜻이다.
    
    문자열 곱하기를 좀 더 응용해보자. 다음과 같은 소스를 에디터로 작성해 실행시켜보자.
    
    # multistring.py
    
    print("=" * 50)
    print("My Program")
    print("=" * 50)
    결과값은 다음과 같이 나타날 것이다.
    
    ==================================================  
    My Program  
    ==================================================
    위와 같은 표현은 자주 사용하게 된다. 프로그램을 만들고 실행시켰을 때 출력되는
    화면 제일 상단에 프로그램 제목으로 위처럼 만들면 보기 좋지 않겠는가?
    
"""
print("=" * 50)
print("My Program")
print("=" * 50)
print()
"""
인덱싱과 슬라이싱

인덱싱(indexing)이란 무엇인가를 ‘가리킨다’는 의미이고, 슬라이싱(slicing)은 무엇인가를 ‘잘라낸다’라는 의미이다.
이것들을 생각하면서 다음의 예를 따라해 보도록 하자.

>>> a = "Life is too short, You need Python"
>>> a[3]
'e'
a[3] 이 뜻하는 것은 a라는 문자열의 네 번째 문자인 'e'를 말한다.
위의 예에서 보듯이 a[3]이란 것은 문자열 내 특정한 값을 뽑아내는 역할을 해준다. 이러한 것을 인덱싱(Indexing)이라고 부른다.
""""""
    몇가지를 인덱싱을 더 해 보도록 하자.
    
    >>> a[0]
    'L'
    >>> a[12]
    's'
    >>> a[-1]
    'n'
    마지막의 a[-1]이 뜻하는 것은 뭘까? 눈치 빠른 독자는 이미 알겠지만 바로 문자열을 뒤에서부터 읽기 위해서
    마이너스(-)기호를 붙이는 것이다. 즉 a[-1]은 뒤에서부터 세어서 첫 번째가 되는 문자를 말한다.
    a는 "Life is too short, You need Python"이라는 문장이므로 뒤에서부터 첫 번째 문자는 가장 마지막 문자인 'n'이 될 것이다.
    
    뒤에서부터 첫 번째 문자를 표시 할 때 a[-0]이라고 해야 하지 않겠는가? 라는 의문이 들수도 있겠지만 잘 생각해 보자.
    0과 -0은 똑같은 것이기 때문에 a[-0]이라는 것은 a[0]과 똑같은 값을 보여준다.
    
    >>> a[-0]
    'L'
    
    계속해서 몇가지 예를 더 보자.
    
    >>> a[-2]
    'o'
    >>> a[-5]
    'y'
    위의 첫 번째 예는 뒤에서부터 두 번째 문자를 가리키는 것이고 두 번째 예는 뒤에서부터 다섯 번째 문자를 가리키는 것이다.
"""
a = "Life is too short, You need Python"
print(a[0])
print(a[-1])
"""
그렇다면 "Life is too short, You need Python"이라는 문자열에서 단순히 한 문자만을 뽑아내는 것이 아니라
'Life'또는 'You'같은 단어들을 뽑아낼 수 있는 방법은 없을까?

다음과 같이 하면 될 것이다.

>>> b = a[0] + a[1] + a[2] + a[3]
>>> b
'Life'
위의 방법처럼 할 수도 있겠지만 파이썬에서는 보다 더 좋은 방법을 제공한다.
""""""
    바로 슬라이싱(Slicing)이라는 기법이다.
    
    위의 예는 슬라이싱 기법으로 다음과 같이 간단하게 처리할 수 있다.
    
    >>> a[0:4]
    'Life'
    a[0:4]가 뜻하는 것은 a라는 문자열 즉, "Life is too short, You need Python"이라는 문장에서
    0부터 4까지의 문자를 뽑아낸다는 뜻이다. 하지만 다음과 같은 의문이 들 것이다.
    
    a[0]은 'L', a[1]은 'i', a[2]은 'f', a[3]은 'e'이니까 a[0:3]만으로도 'Life'라는 단어를 뽑아낼 수 있지 않을까?
    
    다음의 예를 보도록 하자.
    
    >>> a[0:3]
    'Lif'
    이렇게 되는 이유는 간단하다. a[시작번호: 끝번호] 처럼 쓰면 끝번호에 해당하는 것은 포함이 되지 않는다.
    
    a[0:3]을 수식으로 나타내면 다음과 같다.
    
    0 <= a < 3
    즉 위의 수식을 만족하는 a는 a[0], a[1], a[2] 일 것이다. 따라서 a[0:3]은 'Lif'이고 a[0:4]는 'Life'가 되는 것이다.
    이 부분이 문자열 연산에서 가장 혼동하기 쉬운 부분이니 스스로 많이 연습해 보기를 바란다.
"""
print(a[0:3])
print(a[5:7])
"""
슬라이싱의 예를 조금 더 보도록 하자.

>>> a[0:5]
'Life '
위의 예는 a[0] + a[1] + a[2] + a[3] + a[4]와 동일하다. a[4]라는 것은 공백문자 ' '이기 때문에
'Life'가 아닌 'Life '가 되는 것이다. 공백문자 역시 'L', 'i' , 'f', 'e'와 동일하게 취급되는 것을 잊지 말도록 하자.
'Life'와 'Life '는 완전히 다른 문자열이다.

항상 시작번호가 '0'일 필요는 없다.

>>> a[0:2]
'Li'
>>> a[5:7]
'is'
>>> a[12:17]
'short'
a[시작번호:끝번호]에서 끝번호 부분을 생략하면 시작번호부터 그 문자열의 끝까지를 뽑아내게 된다.

    >>> a[19:]
    'You need Python'
    a[시작번호:끝번호]에서 시작번호를 생략하면 그 문자열의 처음부터 끝번호까지 뽑아내게 된다.
    
    >>> a[:17]
    'Life is too short'
    a[시작번호:끝번호]에서 시작번호와 끝번호를 생략하면
    
    >>> a[:]
    'Life is too short, You need Python'
    a[시작번호:끝번호]에서 시작번호와 끝번호를 모두 생략했기 때문에 이것은 처음부터 끝까지를 말하게 되므로 위와 같은 결과를 보여주는 것이다.

    슬라이싱에서 역시 인덱싱과 마찬가지로 '-'기호를 사용할 수가 있다.
    >>> a[19:-7]
    'You need'
    a[19:-7]이 뜻하는 것은 a[19]에서부터 a[-7]까지를 말한다. 이것 역시 a[-7]은 포함하지 않는다.
"""
print(a[:])
print(a[:17])
print(a[19:])
print(a[19:-7])
print()
"""
자주 사용되는 슬라이싱 예

>>> a = "20010331Rainy"
>>> year = a[:4]
>>> day = a[4:8]
>>> weather = a[8:]
>>> year
'2001'
>>> day
'0331'
>>> weather
'Rainy'
""""""

    “Pithon”이란 문자열을 “Python"으로 바꾸려면?
    
    위의 제목과 같이 "Pithon"이란 문자열을 "Python"으로 바꾸려면 어떻게 해야 할까? 제일 먼저 떠오르는 생각은 다음과 같을 것이다.
    
    >>> a = "Pithon"
    >>> a[1]
    'i'
    >>> a[1] = 'y'
    >
    위의 예에서 보듯이 우선 a라는 변수에 "Pithon"이란 문자열을 대입하고 a[1]이란 값이 'i'니까
    a[1]을 위의 예처럼 'y'로 바꾸어 준다는 생각이다. 하지만 결과는 어떻게 나올까?
    
    당연히 에러가 나고 실패하게 될 것이다. 에러가 나는 이유는 문자열의 요소 값은 바꿀 수 있는 값이 아니기 때문이다.
    왜 바꿀 수 없는가? 라는 질문을 하지는 말자. 그냥 바꿀 수 없는 것이다. 하지만 앞서 살펴보았던 슬라이싱 기법을 이용해서
    "Pithon"이란 문자열을 "Python"으로 바꿀 수 있는 방법이 있다.

다음의 예를 보자.

>>> a = "Pithon"
>>> a[:1]
'P'
>>> a[2:]
'thon'
>>> a[:1] + 'y' + a[2:]
'Python'
위의 예에서 보듯이 슬라이싱을 이용해서 먼저 'Pithon'이라는 문자열을 'P'부분과 'thon'부분으로 나눌 수 있기 때문에
그 사이에 'y'라는 문자를 추가하여 'Python'이라는 문자열을 만들면 된다.
"""
a = "Pithon"
print(a[:1] + 'y' + a[2:])
print()
"""
    문자열 포매팅(Formatting)

    예 4) 두 개 이상의 값을 치환
    
    >>> number = 10
    >>> day = "three"
    >>> print("I eat %d apples. so I was sick for %s days." % (number, day))
    I eat 10 apples. so I was sick for three days.
    예 4처럼 두 개 이상의 값을 치환하려면 위에서 보듯이 마지막 % 다음에 ( ) 사이에 콤마로 구분하여 변수를 넣어 주어야만 한다.
""""""
문자열 포맷 코드

예 4는 대입시키는 자료형으로 정수와 문자열을 사용했지만 이 이외에도 다양한 것들을 대입시킬 수 있다.
문자열 포맷 코드로는 다음과 같은 것들이 있다.

    코드    설명
    %s    문자열 (String)
    %c    문자 한개(character)
    %d    정수 (Integer)
    %f    부동소수 (floating-point)
    %o    8진수
    %x    16진수
    %%    Literal % (문자 '%s' 자체)
    
여기서 재미있는 것은 %s 포맷 코드로 이것은 어떤 형태로든 변환이 가능하다. 무슨 말인지 예를 통해 확인해 보자.

>>> print("I have %s apples" % 3)
I have 3 apples
>>> print("Todays rate is %s" % 3.234)
Todays rate is 3.234
3을 문자열 내에 삽입하려면 문자열 내에 %d가 있어야 하고 3.234를 삽입하려면 문자열 내에 %f가 있어야 하지만
%s를 사용하면 이런 것을 생각하지 않아도 된다. 왜냐하면 %s는 자동으로 % 뒤의 파라미터 값을 문자열로 치환하기 때문이다.
따라서 항상 %s를 사용하면 프로그램 소스를 읽을 때 조금 헷갈리겠지만 에러는 나지 않을 것이다.

""""""
포맷 코드의 또 다른 기능

위에서 보았듯이 %d, %s등의 포맷코드는 문자열 내에 어떤 값을 삽입하기 위해서 사용됨을 알 수 있었다.
하지만 포맷코드를 숫자와 함께 사용하면 더 유용하게 사용할 수 있다. 다음의 예를 보고 따라해 보도록 하자.
    예 1) 정렬과 공백
    
    >>> print("%10s" % "hi")
            hi
    ^^^^^^^^^^
    즉 "%10s"의 의미는 길이가 10개인 문자열 공간에서 오른쪽으로 정렬하고 그 앞의 나머지는 공백으로 남겨 두라는 의미이다.
    그렇다면 반대쪽인 왼쪽 정렬은 "%-10s"가 될 것이다.
    
    확인해 보자.
    
    >>> print("%-10sjane." % 'hi')
    hi        jane.
    ^^^^^^^^^^
    왼쪽으로 정렬하고 나머지는 공백으로 채웠음을 볼 수 있다.
"""
print("%10s" % "hi")
print("%-10sjane." % 'hi')
print()
"""
    예 2) 소숫점 표현
    
    >>> print("%0.4f" % 3.42134234)
    3.4213
    즉, 3.42134234를 소수점 4번째까지만 나타내고 싶을 경우에 위와 같이 하였다.
    즉 여기서 '.'의 의미는 소수점 포인트를 말하고 그 뒤의 숫자 4는 뒤에 나올 숫자의 개수를 말한다.
    '.'앞의 숫자는 이전의 예에서와 같이 오른쪽 또는 왼쪽 정렬을 말하는 숫자이다.
    
    >>> print("%10.4f" % 3.42134234)
        3.4213
    ^^^^
    위의 예는 3.42134234라는 숫자를 10개의 문자열 공간에 오른쪽으로 정렬하고
    소수점은 4번째 자리까지만 표시하게 하는 예를 보여준다. 위의 예와의 차이점은 숫자를 오른쪽으로 정렬했다는 점이다.
    위에서 알아본 것들은 주로 결과값을 깔끔하게 정리할 목적으로 많이 사용한다.
"""
print("%0.4f" % 3.42134234)
print("%10.4f" % 3.42134234)
print()
"""
############################## 문자열 관련 메소드 ##############################
    소문자를 대문자로 바꾸기(upper)
    >>> a = "hi"
    >>> a.upper()
    'HI'

    대문자를 소문자로 바꾸기(lower)
    >>> a = "HI"
    >>> a.lower()
    'hi'
    
    대문자와 소문자를 서로 바꾸기(swapcase)
    >>> a = "Hi man"
    >>> a.swapcase()
    'hI MAN'
    대문자와 소문자를 서로 바꾸어 준다.
"""
a = "aBcDEfghIJkLMn"
print(a)
print(a.upper())
print(a.lower())
print(a.swapcase())
print()
"""
    문자 갯수 세기(count)
    
    >>> a = "hobby"
    >>> a.count('b')
    2
    문자열 중 문자 ‘b’의 개수를 반환한다.
"""
a = "hobby"
print(a)
print(a.count('b'))
print()
"""
    위치 알려주기1(find)
    
    >>> a = "Python is best choice"
    >>> a.find('b')
    10
    문자열 중 문자 'b'가 처음으로 나온 위치를 반환한다. 만약 찾는 문자나 문자열이 존재하지 않는다면 -1을 반환한다.
"""
"""
    위치 알려주기2(index)
    
    >>> a = "Life is too short"
    >>> a.index('t')
    8
    문자열 중 문자 't'가 처음으로 나온 위치를 반환한다. 만약 찾는 문자나 문자열이 존재하지 않는다면 에러를 발생시킨다.
    위의 find함수와 다른 점은 없는 문자를 찾으려고 하면 에러가 발생한다는 점이다.
"""
a = "Python is best choice"
print(a)
print(a.find('b'))
print(a.find('z'))
print(a.index('b'))
#print(a.index('z')) #error
print()
"""
문자열 삽입 (join)

>>> a= ","
>>> a.join('abcd')
'a,b,c,d'
"abcd"라는 문자열의 각각의 문자사이에 변수 a의 값인 ','을 삽입한다.
"""
a = ","
print(a.join('abcd'))
print()
"""
왼쪽 공백 지우기 (lstrip)

>>> a = " hi"
>>> a.lstrip()
'hi'
문자열중 가장 왼쪽의 연속된 공백들을 모두 지운다. 여기서 lstrip에서 'l'이 의미하는 것은 left이다.
""""""
오른쪽 공백 지우기 (rstrip)

>>> a= "hi "
>>> a.rstrip()
'hi'
문자열중 가장 오른쪽의 연속된 공백들을 모두 지운다. 여기서 rstrip에서 'r'이 의미하는 것은 right이다.
""""""
양쪽 공백 지우기 (strip)

>>> a = " hi "
>>> a.strip()
'hi'
양쪽의 연속된 공백을 모두 지운다.
"""
a = " hi "
print(a)
print(a.lstrip())
print(a.rstrip())
print(a.strip())
print()
"""
문자열 바꾸기 (replace)

>>> a = "Life is too short"
>>> a.replace("Life", "Your leg")
'Your leg is too short'
replace(바뀌게 될 문자열, 바꿀 문자열)처럼 사용해서 문자열 내의 특정한 값을 다른 값으로 치환해 준다.
"""
a = "Life is too short"
a = a.replace("Life", "Your leg")
print(a)
print()
"""
문자열 나누기 (split)

>>> a = "Life is too short"
>>> a.split()
['Life', 'is', 'too', 'short']
>>> a = "a:b:c:d"
>>> a.split(':')
['a', 'b', 'c', 'd']
a.split()처럼 괄호안에 아무런 값도 넣어주지 않으면 공백을 기준으로 문자열을 나누어 준다.

만약 a.split(':')처럼 괄호안에 특정한 값이 있을 경우에는 괄호안의 값을 구분자로 해서 문자열을 나누어 준다.
리스트로 반환한다.
"""
a = "Life is too short"
print(a.split())
a = "a:b:c:d"
print(a.split(':'))
"""
위에서 소개한 문자열 관련 함수들은 문자열 처리에서 매우 사용 빈도가 높은 것들이고 유용한 것들이다.
이 외에도 몇 가지가 더 있지만 자주 사용되는 것들은 아니다.
"""