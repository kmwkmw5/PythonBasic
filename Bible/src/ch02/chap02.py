#===============================================================================
# 제 2 장 파이썬 문과 기본 자료형
#===============================================================================

#===============================================================================
# 2.1 변수 이름 짓기
#===============================================================================

import keyword
print(keyword.kwlist)
#['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue',
#'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global',
#'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise',
#'return', 'try', 'while', 'with', 'yield']

#===============================================================================
# 2.2 파이썬 기초문
#===============================================================================

#------------------------------------------------------------------------------ 
# 여러 줄을 한 줄로 잇기
#------------------------------------------------------------------------------ 

a = 1; b = 3
if (a==1) and \
(b==3):
	print('connected lines')
	
#------------------------------------------------------------------------------ 
# 치환문
#------------------------------------------------------------------------------ 

x = y = z = 0

# 언패킹(Unpacking)
a, *b = [1, 2, 3, 4, 5]
print(a)
#1
print(b)
#[2, 3, 4, 5]

*a, b = [1, 2, 3, 4, 5]
print(a)
#[1, 2, 3, 4]
print(b)
#5

#===============================================================================
# 2.3 문자열로 표현된 파이썬 코드 실행하기
#===============================================================================

#------------------------------------------------------------------------------ 
# eval() 함수 : 식(Expression)을 처리함(리턴)
# eval(expression[, globals=None[, locals=None]])
# globals: 전역 영역의 사전, locals: 지역 영역의 사전 (11장)
#------------------------------------------------------------------------------ 

a = 1
a = eval('a + 4')
print(a)
#5

#------------------------------------------------------------------------------ 
# exec() 함수 : 문자열로 표현된 문(Statement)을 처리함
# exec(object[, globals[, locals]])
# globals: 전역 영역의 사전, locals: 지역 영역의 사전 (11장)
#------------------------------------------------------------------------------ 

a = 5
exec('a = a + 4')
print(a)
#9

s = '''
a = 1
if a > 0:
	print('Success')
'''
exec(s)
#Success

#------------------------------------------------------------------------------ 
# compile() 함수
# compile(string, filename, mode)
# string: 코드 문자열, filename: 파일 이름('<string>'), mode: eval, single, exec
#------------------------------------------------------------------------------ 

# Expression
code = compile('a + 1', '<string>', 'eval')
a = 1
a = eval(code)
print(a)
#2

# Single Statement
code = compile('a = a + 1', '<string>', 'single')	#single->exec 가능
a = 1
exec(code)
print(a)
#2

# Multi Statement
s = '''
a = 1
for k in range(10):
	a = a + 1
print(a)
'''
code = compile(s, '<string>', 'exec')
exec(code)
#11

# File
s = open('compile_src.py').read()
code = compile(s, 'compile_src.py', 'exec')		#compile_src.py-><string> 가능
exec(code)
#11

#===============================================================================
# 2.4 콘솔 출력
#===============================================================================

#------------------------------------------------------------------------------ 
# print 함수
#------------------------------------------------------------------------------

print('add :', 4+5, 'sub =', 4-2)
#add : 9 sub = 2
print(1, 2, end=' '); print(3, 4)
#1 2 3 4
print(1, 2, 3, 4, 5, sep='')
#12345
f = open('out.txt', 'w')
print(1, 2, 3, 4, 5, file = f)
f.close()
print(open('out.txt').read())
#1 2 3 4 5\n

#------------------------------------------------------------------------------ 
# 서식 출력
# format(value, format_spec)
# value를 format_spec에 지정된 서식의 문자열로 변환하여 출력
#------------------------------------------------------------------------------ 

print(format(1.234567, '10.3f'))
#     1.235
#1234567890

# 다른 형태(C# 비슷)
print('Name : {0}, Phone : {1}'.format('gslee', 5284))

import math
for k in range(1, 5):
	print('sqrt({0})={1}'.format(k, math.sqrt(k)))
#sqrt(1)=1.0
#sqrt(2)=1.4142135623730951
#sqrt(3)=1.7320508075688772
#sqrt(4)=2.0

#------------------------------------------------------------------------------ 
# pprint 모듈을 사용하기 : 복잡한 데이터를 깔끔한 형태로 출력
#------------------------------------------------------------------------------ 

import pprint
complicated = ['spam', (1,2,3), ('ham','egg',('ab','cd',('abc','def')))]
complicated = complicated * 3
print(complicated)
#['spam', (1, 2, 3), ('ham', 'egg', ('ab', 'cd', ('abc', 'def'))), 'spam',
#(1, 2, 3), ('ham', 'egg', ('ab', 'cd', ('abc', 'def'))), 'spam', (1, 2, 3),
#('ham', 'egg', ('ab', 'cd', ('abc', 'def')))]
pprint.pprint(complicated)
#['spam',
# (1, 2, 3),
# ('ham', 'egg', ('ab', 'cd', ('abc', 'def'))),
# 'spam',
# (1, 2, 3),
# ('ham', 'egg', ('ab', 'cd', ('abc', 'def'))),
# 'spam',
# (1, 2, 3),
# ('ham', 'egg', ('ab', 'cd', ('abc', 'def')))]

#===============================================================================
# 2.5 자료형의 종류
#===============================================================================

#------------------------------------------------------------------------------ 
# 부울(bool)
#------------------------------------------------------------------------------ 

print(True + True, True * False)
#2 0
print(bool(3))
#True
print(bool([]))
#False

#------------------------------------------------------------------------------ 
# 문자열(str)
#------------------------------------------------------------------------------ 

s = 'Hello'
print(s[1:])
#ello
print(s[:3])
#Hel
print(s[:])
#Hello
print(s[::2])
#Hlo
print(s[::-1])
#olleH

#s[0] = 'h'
#TypeError: 'str' object does not support item assignment
s = 'h' + s[1:]
print(s)
#hello

print('e' in s)
#True
print('e' not in s)
#False

s = 'Hello World'
print(s)
#Hello World
print(s.upper())
#HELLO WORLD
print(s.split())
#['Hello', 'World']
print(s.find('World'))
#6
print(s.startswith('Hello'))	# 시작하는 부분 문자열을 확인한다.
#True
print(s.endswith('ld'))			# 종료하는 부분 문자열을 확인한다.
#True

#------------------------------------------------------------------------------ 
# 바이트(bytes, bytearray)
# 0 ~ 255 사이 코드의 열
#------------------------------------------------------------------------------ 

# 바이트 상수의 선언은 b로 시작한다.
bt = b'Python rules'
print(bt)
#b'Python rules'
print(type(bt))
#<class 'bytes'>

# 문자열에서 사용하는 연산을 거의 제공한다.
print(bt[1:5])
#b'ytho'
print(b'th' in bt)
#True
print(bt.upper())
#b'PYTHON RULES'
print(bt.split())
#[b'Python', b'rules']
print(bt.startswith(b'Py'))
#True
print(bt.endswith(b'es'))
#True

# 문자열과 바이트 간 차이점
s = '이강성'
#c = b'이강성'
#SyntaxError: bytes can only contain ASCII literal characters.
#바이트는 1바이트로 표현되는 문자만 표현할 수 있다.
#b'Python' + 'rules'
#TypeError: can't concat bytes to str

# 바이트를 문자열로 변환하려면 decode() 메소드를 사용한다.
print(bt.decode())			# 기본값으로 utf-8
#Python rules
print(bt.decode('euc-kr'))	# 직접 인코딩을 지정할 수 있다.
#Python rules

# 문자열을 바이트로 변경하려면 encode() 메소드를 사용한다.
print(s)
#이강성
print(s.encode())
#b'\xec\x9d\xb4\xea\xb0\x95\xec\x84\xb1'

# bytearray 자료형 : 변경이 가능한 바이트
ba = bytearray(bt)	# bytes 자료형에서 bytearray로 형변환
print(ba)
#bytearray(b'Python rules')
ba[7] = ord('R')	# ba[7] = 82
print(ba)
#bytearray(b'Python Rules')
print(bytes(ba))
#b'Python Rules'
print(ba.decode())
#'Python Rules'

#------------------------------------------------------------------------------ 
# 리스트(list)
#------------------------------------------------------------------------------ 

# 슬라이싱과 range
L = [1, 2, 3]
print(L + L)
#[1, 2, 3, 1, 2, 3]
print(L * 3)
#[1, 2, 3, 1, 2, 3, 1, 2, 3]
L = range(10)
print(L)
#range(0, 10)
#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(L[::2])
#range(0, 10, 2)
#[0, 2, 4, 6, 8]
print(L[::-1])
#range(9, -1, -1)
#[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
print(4 in L)
#True

# 리스트의 메소드
L = [1, 2, 3]
L.append(4)
print(L)
#[1, 2, 3, 4]
del L[0]
print(L)
#[2, 3, 4]
L.reverse()
print(L)
#[4, 3, 2]
L.sort()
print(L)
#[2, 3, 4]

#------------------------------------------------------------------------------ 
# 튜플(tuple)
#------------------------------------------------------------------------------ 

t = (1, 2, 3)
#t[0] = 100
#TypeError: 'tuple' object does not support item assignment

#------------------------------------------------------------------------------ 
# 사전(dict)
#------------------------------------------------------------------------------ 

d = { 'one' : '하나', 'two' : '둘', 'three' : '셋' }
d = dict(one = '하나', two = '둘', three = '셋')
print(d['one'])
#하나
d['four'] = '넷'
print(d)
#{'one': '하나', 'three': '셋', 'two': '둘', 'four': '넷'}
print('one' in d)	# 키에 대하여 멤버 검사를 한다.
#True

d = { 'one' : '하나', 'two' : '둘', 'three' : '셋', 'four' : '넷' }
print(d.keys())
#dict_keys(['one', 'three', 'four', 'two'])
print(d.values())
#dict_values(['셋', '둘', '하나', '넷'])
print(d.items())
#dict_items([('four', '넷'), ('one', '하나'), ('three', '셋'), ('two', '둘')])

#------------------------------------------------------------------------------ 
# 집합(set)
#------------------------------------------------------------------------------ 

# 초기화
s1 = {1, 2, 3}
print(type(s1))
#<class 'set'>
s2 = set()
print(s2)
#set()
L = [1, 2, 3, 2, 3, 2, 3, 2, 4, 5]
s = set(L)
print(s)
#{1, 2, 3, 4, 5}
print(3 in s)
#True

# 연산
s = {1, 2, 3}
t = {3, 4, 5, 6}
print(s.union(t))			# 합집합
#{1, 2, 3, 4, 5, 6}
print(s.intersection(t))	# 교집합
#{3}
print(s | t)				# 합집합
#{1, 2, 3, 4, 5, 6}
print(s & t)				# 교집합
#{3}
print(s - t)				# 차집합
#{1, 2}

# 집합의 변경
s = {1, 2, 3}
s.add(4)
print(s)
#{1, 2, 3, 4}
s.discard(4)
print(s)
#{1, 2, 3}

#------------------------------------------------------------------------------ 
# 자료형의 분류 : 70 ~ 71쪽
# 데이터 저장 방법
#	Dicrect, Sequence, Mapping, Set
# 변경 가능성
#	Mutable, Immutable
# 데이터 저장 개수
#	Literal/Scalar, Container
#------------------------------------------------------------------------------ 

#===============================================================================
# 2.7 메모리 관리
#===============================================================================

#------------------------------------------------------------------------------ 
# 참조 횟수를 확인하는 방법
#------------------------------------------------------------------------------ 

from sys import getrefcount
a = 10234
print(getrefcount(a))
#2(이클립스에선 4)
#getrefcount에서 참조 횟수가 1 증가했기 때문에 1을 뺀 값으로 생각해야 함

#------------------------------------------------------------------------------ 
# 객체의 id 식별하기
#------------------------------------------------------------------------------ 

a = 500
print(id(a))
b = a
print(id(b))

# 같은 객체를 참조하고 있는지(같은 id)
c = [1, 2, 3]
d = [1, 2, 3]
print(c is d)
#False
a = 500
b = a
print(a is b)
#True

# 같은 값을 가지고 있는지
c = [1, 2, 3]
d = [1, 2, 3]
print(c == d)
#True

# QUIZ
# 1
a = 500
b = 500
print(a is b)
#False(이클립스에선 True)
# 2
a = 1
b = 1
print(a is b)
#True
# 4
s = t = [1, 2, 3]
print(s is t)
#True
# -5 ~ 256까지의 숫자는 객체를 미리 생성하여 공유함.
# 따라서 500은 False, 1은 True

#===============================================================================
# 2.8 파이썬 제어문
#===============================================================================

#------------------------------------------------------------------------------ 
# 삼항 연산자
#------------------------------------------------------------------------------ 

# 참일때 if 조건 else 거짓일때
a = 3
x = a*2 if a>5 else a/2
print(x)
#1.5

# (터플)[인덱스] : True는 1, False는 0임을 이용
a = 10
print((a/2, a*2)[a>5])
#20

def add(a, b):
	return a+b
def sub(a, b):
	return a-b
select=0
print((add, sub)[select](2, 3))
#5

# {딕셔너리}[키]
a = 10
print({ True:add, False:sub }[a > 5](3, 4))

#------------------------------------------------------------------------------ 
# 반복자(iter) iterator
#------------------------------------------------------------------------------ 

i = iter(range(10))
print(i)
#<range_iterator object at 0x7fa9a8c10b10>
print(next(i))
#0
print(next(i))
#1

#------------------------------------------------------------------------------ 
# enumerate() : (인덱스, 값) 의 튜플을 반환
# 딕셔너리의 경우는 사용하지 않음!!!!(키가 아닌 인덱스와 값을 반환하므로 의미가 없음)
#------------------------------------------------------------------------------ 

L = ['cat', 'dog', 'bird', 'pig', 'spam']
for k, animal in enumerate(L):
	print(k, animal)
#0 cat
#1 dog
#2 bird
#3 pig
#4 spam

#------------------------------------------------------------------------------ 
# for 문에서 else
#------------------------------------------------------------------------------ 

# break가 없는 경우 : 마지막에 실행됨
for x in range(10):
	print(x, end=' ')
else:
	print('else block')
print('done')
#0 1 2 3 4 5 6 7 8 9 else block
#done

# break가 실행되는 경우 : 실행되지 않음
for x in range(10):
	break
	print(x, end = ' ')
else:
	print('else block')
print('done')
#done

#------------------------------------------------------------------------------ 
# with 문
#------------------------------------------------------------------------------ 

with open('output.txt', 'w') as f:
	f.write('Hello~')