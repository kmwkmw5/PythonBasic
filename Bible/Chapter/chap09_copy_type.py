#===============================================================================
# 제 9 장 객체의 복사와 형변환
#===============================================================================

#===============================================================================
# 9.1 객체의 복사 : 참조 복사, 객체 복사
#===============================================================================

#===============================================================================
# 9.2 얕은 복사와 깊은 복사
#===============================================================================

#------------------------------------------------------------------------------ 
# copy.copy(), copy.deepcopy()
import copy
a = [1,2,3]
b = [4,5,a]
x = [a,b,100]

# 얕은 복사
y = copy.copy(x)

# 깊은 복사
y = copy.deepcopy(x)
#------------------------------------------------------------------------------ 

#------------------------------------------------------------------------------
# dict.copy(), 슬라이싱 : 얕은 복사
a = ['first', '첫 번째']
b = ['second', '두 번째']

mydict = {}
mydict['First'] = a
mydict['Second'] = b
mydict['Third'] = '세 번째'

cpdict1 = mydict.copy()
cpdict2 = copy.deepcopy(mydict)

print(mydict['First'] is cpdict1['First'])
#True
print(mydict['First'] is cpdict2['First'])
#False
print(mydict['Third'] is cpdict1['Third'])
#True
print(mydict['Third'] is cpdict2['Third'])
#True
#------------------------------------------------------------------------------ 

#===============================================================================
# 9.3 형변환
#===============================================================================

#===============================================================================
# 수치형 변환
#===============================================================================

#------------------------------------------------------------------------------ 
# 1. 정수형으로의 변환 : ValueError
# int() : 소수 부분을 없애고 정수 부분만 취한다.
# round() : 반올림
# math.floor() : 내림
# math.ceil() : 올림
#------------------------------------------------------------------------------ 

#------------------------------------------------------------------------------ 
# 2. 실수형으로의 변한 : float() : 문자열이나 정수를 인수로 받음
#------------------------------------------------------------------------------ 

#------------------------------------------------------------------------------ 
# 3. 복소수로의 변환 : complex(실수부, 허수부)
#------------------------------------------------------------------------------ 

#===============================================================================
# 진수 변환
#===============================================================================

#------------------------------------------------------------------------------ 
# 임의의 진수를 10진수로 변환 : int(숫자, 진법) : 진법의 숫자를 10진수로 바꿈
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# 10진수를 임의의 진수로 변환(문자열로 반환됨)
# hex(숫자) : 16진수로 변환(0x숫자)
# oct(숫자) : 8진수로 변환(0o숫자)
# bin(숫자) : 2진수로 변환(0b숫자)
# "{0:x}".format(숫자) : x 대신 x, o, b 등을 사용(0x이런거 없이 나옴)
#------------------------------------------------------------------------------

#===============================================================================
# 시퀀스형으로의 변환
#===============================================================================
# list(), tuple()
# dict(zip(키시퀀스, 값시퀀스))

#===============================================================================
# 문자열로의 변환
#===============================================================================

#------------------------------------------------------------------------------ 
# 임의의 객체와 문자열의 변환

# str() : 비형식적, 보기 좋게
print(str('abc'))
#abc

# repr() : 형식적, 실행가능한 형태
print(repr('abc'))
#'abc'

# eval() : 문자열로 표현된 식을 실행(ex문자열로 표현된 객체의 생성)
mylist = eval('[5,6,7,8]')
print(mylist)
#[5, 6, 7, 8]
x = 1
print(eval('x + 1'))
#2

# 어떤 객체를 문자열로 변환한 후, 다시 이 문자열을 원래의 객체로 변환할 때
a = {1:"one", 2:"two"}
b = repr(a)
print(b, type(b))
#{1: 'one', 2: 'two'} <class 'str'>
c = eval(b)
print(c, type(c))
#{1: 'one', 2: 'two'} <class 'dict'>
#------------------------------------------------------------------------------ 

#------------------------------------------------------------------------------ 
# 유니코드와 문자 간 변환

# chr() : 유니코드 -> 문자
print(chr(97)) #a

# ord() : 문자 -> 유니코드
print(ord('A')) #65
#------------------------------------------------------------------------------ 

#------------------------------------------------------------------------------ 
# 문자열과 바이트의 변환

# encode() : 문자열 -> 바이트
s = 'string'
print(s.encode('utf-8'))
#b'string'

# decode() : 바이트 -> 문자열
b = b'bytes'
print(b.decode('utf-8'))
#bytes
#------------------------------------------------------------------------------ 

#------------------------------------------------------------------------------ 
# 이진 바이트 열과 16진 바이트 열 변환

import binascii

print(binascii.hexlify(b'abc'))
#b'616263'
print(binascii.hexlify(bytearray(b'abcde')))
#b'6162636465'
print(binascii.unhexlify(b'6162636465'))
#b'abcde'
#------------------------------------------------------------------------------ 

#------------------------------------------------------------------------------ 
# 정수를 쉼표가 있는 문자열로의 변환

print(format(123456789, ','))
print("{:,} {:,}".format(10030405, 12345))

# locale 모듈은 나라마다 문화적으로 표현이 다른 것들을 도와줌
import locale
locale.setlocale(locale.LC_ALL, "") # 사용자 기본 환경(국가,언어)으로 설정
print(locale.format("%d", 10030405, grouping = True))
#------------------------------------------------------------------------------ 

#===============================================================================
# 9.4 파이썬 자료형의 이진 변환 292p
# 고수준의 파이썬 자료형을 C 언어 등에서 사용할 수 있는 이진 바이트 열로 변환하거나
# 반대로 이진 바이트 열을 파이썬 고수준 자료형으로 변환할 때
# struct 모듈을 사용한다.
# pack(), pack_into(), unpack(), unpack_from(), calcsize()
#===============================================================================