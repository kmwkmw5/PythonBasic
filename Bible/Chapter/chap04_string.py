#===============================================================================
# 제 4 장 문자열
#===============================================================================

#===============================================================================
# 4.1 시퀀스 자료형
#===============================================================================
# 인덱싱, 슬라이싱, 연결하기, 반복하기, 멤버검사, 길이정보

#===============================================================================
# 4.2 문자열 정의하기
#===============================================================================
# 한 줄 문자열, 여러 줄 문자열, 특수 문자, 문자열 연산
#------------------------------------------------------------------------------ 
# 특수 문자
# \ enter	다음 줄과 연속임을 표현			\n or \012	줄 바꾸기
# \0xx		8진수 코드 xx					\xXX		16진수 코드 XX
# \b		백스페이스					\e			Esc 키
# \\, \', \", \t 등
#------------------------------------------------------------------------------ 

#===============================================================================
# 4.3 문자열의 서식 지정하기
#===============================================================================

#------------------------------------------------------------------------------ 
# format() 함수를 사용한 서식 지정
#------------------------------------------------------------------------------ 

int_val = 1234567890
float_val = 56456452.34567
print(format(int_val, ',d'), format(float_val, ',.2f'))	# 반올림 일어남..
#1,234,567,890 56,456,452.35

#------------------------------------------------------------------------------ 
# format() 메소드를 사용한 서식 지정
#------------------------------------------------------------------------------ 

print('{} {}'.format(23, 1.23))
#23 1.23
L = [1,5,3,7,4,5]
print('최대값:{0}, 최소값:{1}, 최대값:{0}'.format(max(L), min(L)))
#최대값:7, 최소값:1, 최대값:7

# 자리수 지정
print('sqrt({:3}) = {:0.5}'.format(2, 2**0.5))		# 3: 세자리, 0.5: 유효숫자 5개
#sqrt(  2) = 1.4142
print('sqrt({0:3}) = {1:0.5}'.format(2, 2**0.5))	# 0: 첫 번째 인수, 1: 두 번째 인수
#sqrt(  2) = 1.4142
print('sqrt({:3d}) = {:0.5f}'.format(2, 2**0.5))	# d: decimal, f: float
#sqrt(  2) = 1.4142
print('sqrt({0:3d}) = {1:0.5f}'.format(2, 2**0.5))
#sqrt(  2) = 1.4142
print('{:,d}'.format(1234567890))					# 세 자리씩 , 출력
#1,234,567,890
print('{:,.2f}'.format(1234567890.1256))
#1,234,567,890.13

# 리스트를 인덱싱으로 접근
L = [0,1,1,2,3,5,8,13,21]
print('next value of {0[4]} is {0[5]}'.format(L))
#next value of 3 is 5

# 키워드 인수를 이름으로 접근
print('나이:{age}, 키:{height}'.format(age=49, height=173))
#나이:49, 키:173

# format_map() : 사전이 인수로 전달될 때
info = {'size':32, 'height':173, 'age':49}
print('나이:{age}, 키:{height}'.format_map(info))
#나이:49, 키:173

# 모듈을 이름으로 접근
import sys
print('실수 최대값 : {0.float_info.max}'.format(sys))
#실수 최대값 : 1.7976931348623157e+308
print('{0.__doc__}'.format(list))
#list() -> new empty list
#list(iterable) -> new list initialized from iterable's items

#------------------------------------------------------------------------------ 
# 수치 변환 기호
#------------------------------------------------------------------------------ 

import locale
print(locale.setlocale(locale.LC_ALL, ''))
#ko_KR.UTF-8

print('{0:b} {0:d} {0:o} {0:x} {0:X} {1:d} {1:n}'.format(13,123456789))
#       1101   13    15    d     D 123456789 123,456,789
#      2진수  10진수 8진수 16진수 16진수 10진수 ,10진수

print('{0:e} {0:E} {0:f} {0:F}'.format(0.6789))			# e,E: 지수 형식  f,F: 고정 소수점 형식
#6.789000e-01 6.789000E-01 0.678900 0.678900
print('{1:g} {1:G} {1:n} {0:%}'.format(0.6789, 123E30))	# g,G: 고정 소수점 형식이나 지수 형식 중 적절한 것
#1.23e+32 1.23E+32 1.23e+32 67.890000%					# n: g와 같으나 현재 locale을 적용하여 출력

#===============================================================================
# 4.4 문자열 메소드
#===============================================================================

#http://docs.python.org/3/library/stdtypes.html#string-methods

#------------------------------------------------------------------------------ 
# 대소문자 관련
#------------------------------------------------------------------------------ 
s = 'i like programming'
print(s.upper())
#I LIKE PROGRAMMING
print(s.lower())
#i like programming
print('I Like Programming'.swapcase())
#i lIKE pROGRAMMING
print(s.capitalize())
#I like programming
print(s.title())
#I Like Programming

#------------------------------------------------------------------------------ 
# 검색 관련
#------------------------------------------------------------------------------ 
#####0         1         2         3
#####012345678901234567890123456789012345
s = 'i like programming, i like swimming.'
print(s.count('like'))
#2
print(s.find('like'))
#2
print(s.find('like', 3))
#22
print(s.find('my'))
#-1
print(s.rfind('like'))
#22
print(s.index('like'))
#2
#print(s.index('my'))
#ValueError: substring not found
print(s.rindex('like'))
#22
print(s.startswith('i like'))
#True
print(s.endswith('swimming.'))
#True
print(s.startswith('progr', 7))
#True
print(s.endswith('like', 0, 26))
#True

#------------------------------------------------------------------------------ 
# 편집과 치환
#------------------------------------------------------------------------------ 
u = ' spam and ham '
print(u.strip())
#'spam and ham'
print(u.rstrip())
#' spam and ham'
print(u.lstrip())
#'spam and ham '
print(' abc '.strip())
#'abc'
print('><><abc<><><>'.strip('<>'))
#'abc'
print('><><abc<><><>\n'.strip('<>'))
#'abc<><><>\n'
print('ㅎㅎ 파이썬 만세 ㅎㅎ'.strip('ㅎ'))
#' 파이썬 만세 '
print(u.replace('spam', 'spam, egg'))
#' spam, egg and ham '

#------------------------------------------------------------------------------ 
# 분리와 결합
#------------------------------------------------------------------------------ 
u = ' spam and ham '
print(u.split())
#['spam', 'and', 'ham']
print(u.split('and'))
#[' spam ', ' ham ']
t = u.split()
#['spam', 'and', 'ham']
print(':'.join(t))
#spam:and:ham
print('\n'.join(t))
#spam
#and
#ham
lines = '''first line
second line
third line'''
print(lines.splitlines())
#['first line', 'second line', 'third line']

s = 'one:two:three:four'
print(s.split(':', 2))
#['one', 'two', 'three:four']
print(s.rsplit(':', 1))
#['one:two:three', 'four']

#------------------------------------------------------------------------------ 
# 정렬
#------------------------------------------------------------------------------ 
u = 'spam and egg'
print(u.center(60))
#'                        spam and egg                        '
print(u.ljust(60))
#'spam and egg                                                '
print(u.rjust(60))
#'                                                spam and egg'
print(u.center(60, '-'))
#'------------------------spam and egg------------------------'

#------------------------------------------------------------------------------ 
# tab
#------------------------------------------------------------------------------ 
print('1\tand\t2\t3')
#1	and	2	3
print('1\tand\t2\t3'.expandtabs())
#1       and     2       3
print('1\tand\t2\t3'.expandtabs(4))
#1   and 2   3

#------------------------------------------------------------------------------ 
# 판별
#------------------------------------------------------------------------------ 
print('1234'.isdigit())
#True
print('123\u2155\u2156')
#123⅕⅖
print('123\u2155\u2156'.isnumeric())
#True
print('123\u0661')
#123١
print('123\u0661'.isdecimal())
#True
print('abcd한글'.isalpha())
#True
print('1abc234'.isalnum())
#True
print('abc'.islower())
#True
print('ABC'.isupper())
#True
print(' \t\r\n'.isspace())
#True
print('This Is A Title'.istitle())
#True
print('def'.isidentifier())
#True
print(' \n\t'.isprintable())
#False

#------------------------------------------------------------------------------ 
# 채우기 자리 맞추기
#------------------------------------------------------------------------------ 
print('123'.zfill(5))

#------------------------------------------------------------------------------ 
# 매핑(Mapping)
#------------------------------------------------------------------------------ 
instr = 'abcdef'
outstr = '123456'
trantab = ''.maketrans(instr, outstr)
print(trantab)
#{97: 49, 98: 50, 99: 51, 100: 52, 101: 53, 102: 54}
print('as soon as possible'.translate(trantab))
#1s soon 1s possi2l5

#------------------------------------------------------------------------------ 
# QUIZ
#------------------------------------------------------------------------------ 
s = '''
first line
second line
third line'''
# q1
print(':'.join(s.split('\n')[1:]))
#first line:second line:third line
# q2
print(s.split('\n')[2][0])
#s
# q3
print(':'.join(s.split()))
#first:line:second:line:third:line

#===============================================================================
# 4.5 유니코드 문자열과 바이트 160p
#===============================================================================
# 파이썬3과 유니코드, 인코딩과 바이트, 형변환

#===============================================================================
# 4.6 문서 문자열 169p
#===============================================================================




















